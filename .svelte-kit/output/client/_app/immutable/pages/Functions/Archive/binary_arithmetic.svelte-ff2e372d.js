import{S as $,i as G,s as L,r as f,l as m,a as D,u as o,m as u,n as d,h as t,c as P,p as n,L as V,b as r,G as T,E as F}from"../../../chunks/index-cac77216.js";function O(y){let l,s,U,_,h,x,v,a,q,w,A,E,k,p,C,B,b,M,I,c,R,S;return{c(){l=f(`Just for fun, I made a C++ demonstration that adds and subtracts binary numbers using elementary arithmetic. Here it is: \r
`),s=m("iframe"),_=D(),h=m("p"),x=f("This does the same thing only more elegantly, using using bitwise operators:"),v=D(),a=m("iframe"),w=D(),A=m("br"),E=m("br"),k=f(`\r
\r
ECMAScript 2015 (ES6) introduced typed arrays, making it convenient to efficiently store information in individual bits. After an ArrayBuffer instance is defined, it can be accessed by an instance of DataView. \r
\r
An efficient implementation of the sieve of Eratosthenes, located on this website at `),p=m("a"),C=f("bitmask_prime_generator"),B=f(`, begins with: \r
`),b=m("pre"),M=f(y[0]),I=f(". It took thirty seconds to compute prime numbers up to one billion. The series ended with 999999667, 999999677, 999999733, 999999739, 999999751, 999999757, 999999761, 999999797, 999999883, 999999893, 999999929, and 999999937. These numbers are identical to those shown at "),c=m("a"),R=f("Prime I.T."),S=f("."),this.h()},l(e){l=o(e,`Just for fun, I made a C++ demonstration that adds and subtracts binary numbers using elementary arithmetic. Here it is: \r
`),s=u(e,"IFRAME",{frameborder:!0,width:!0,height:!0,src:!0}),d(s).forEach(t),_=P(e),h=u(e,"P",{});var i=d(h);x=o(i,"This does the same thing only more elegantly, using using bitwise operators:"),i.forEach(t),v=P(e),a=u(e,"IFRAME",{frameborder:!0,width:!0,height:!0,src:!0}),d(a).forEach(t),w=P(e),A=u(e,"BR",{}),E=u(e,"BR",{}),k=o(e,`\r
\r
ECMAScript 2015 (ES6) introduced typed arrays, making it convenient to efficiently store information in individual bits. After an ArrayBuffer instance is defined, it can be accessed by an instance of DataView. \r
\r
An efficient implementation of the sieve of Eratosthenes, located on this website at `),p=u(e,"A",{href:!0});var H=d(p);C=o(H,"bitmask_prime_generator"),H.forEach(t),B=o(e,`, begins with: \r
`),b=u(e,"PRE",{});var J=d(b);M=o(J,y[0]),J.forEach(t),I=o(e,". It took thirty seconds to compute prime numbers up to one billion. The series ended with 999999667, 999999677, 999999733, 999999739, 999999751, 999999757, 999999761, 999999797, 999999883, 999999893, 999999929, and 999999937. These numbers are identical to those shown at "),c=u(e,"A",{href:!0});var N=d(c);R=o(N,"Prime I.T."),N.forEach(t),S=o(e,"."),this.h()},h(){n(s,"frameborder","0"),n(s,"width","80%"),n(s,"height","500px"),V(s.src,U="https://replit.com/@DavidSchalk1/Binary-Addition-Using-Arithmetic?lite=true")||n(s,"src",U),n(a,"frameborder","0"),n(a,"width","80%"),n(a,"height","500px"),V(a.src,q="https://replit.com/@DavidSchalk1/Binary-Addition-Using-Bitwise-Operators?lite=true")||n(a,"src",q),n(p,"href","/Functions/Archive/bitmask_prime_generator"),n(c,"href","http://compoasso.free.fr/primelistweb/page/prime/liste_online_en.php")},m(e,i){r(e,l,i),r(e,s,i),r(e,_,i),r(e,h,i),T(h,x),r(e,v,i),r(e,a,i),r(e,w,i),r(e,A,i),r(e,E,i),r(e,k,i),r(e,p,i),T(p,C),r(e,B,i),r(e,b,i),T(b,M),r(e,I,i),r(e,c,i),T(c,R),r(e,S,i)},p:F,i:F,o:F,d(e){e&&t(l),e&&t(s),e&&t(_),e&&t(h),e&&t(v),e&&t(a),e&&t(w),e&&t(A),e&&t(E),e&&t(k),e&&t(p),e&&t(B),e&&t(b),e&&t(I),e&&t(c),e&&t(S)}}}function j(y){var l=`function sieve (N) {
    var buf = new ArrayBuffer(1.1 * Math.ceil(N/8));
    var view = new Uint8Array(buf);`;return[l]}class K extends ${constructor(l){super(),G(this,l,j,O,L,{})}}export{K as default};
