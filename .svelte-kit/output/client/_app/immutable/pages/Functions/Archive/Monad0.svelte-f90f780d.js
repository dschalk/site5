import{S as He,i as Ie,s as Re,a as v,l as f,r as a,c as y,m as p,n as c,u,h as t,p as $,q as g,b as n,G as r,P as Ae,Q as Se,R as Le,v as ke,f as xe,t as Be,T as Ce,M as De,N as we}from"../../../chunks/index-cac77216.js";import{f as Ne}from"../../../chunks/index-54fd7bcd.js";function Ge(m){let i,_,M,l,b;return{c(){i=f("div"),_=f("p"),M=a(`
A SIMPLE LITTLE MONAD`),this.h()},l(o){i=p(o,"DIV",{style:!0});var d=c(i);_=p(d,"P",{}),c(_).forEach(t),M=u(d,`
A SIMPLE LITTLE MONAD`),d.forEach(t),this.h()},h(){g(i,"font-family","Times New Roman"),g(i,"text-align","center"),g(i,"font-size","32px")},m(o,d){n(o,i,d),r(i,_),r(i,M),b=!0},i(o){b||(De(()=>{l||(l=we(i,Ne,{},!0)),l.run(1)}),b=!0)},o(o){l||(l=we(i,Ne,{},!1)),l.run(0),b=!1},d(o){o&&t(i),o&&l&&l.end()}}}function qe(m){let i,_,M,l,b,o,d,D,w,h,T,z,N,ee,O,L,te,V,H,se,Q,I,ne,U,R,ie,j,x,oe,F,E,J,A,le,K,re,G=m[2](m[0])+"",W,X,S,ae,Y,k,ue,Z,B,fe,C,pe,me,P=Ge();return{c(){P&&P.c(),i=v(),_=f("br"),M=v(),l=f("span"),b=a(`Monad (from Greek \u03BC\u03BF\u03BD\u03AC\u03C2 monas, "singularity" in turn from \u03BC\u03CC\u03BD\u03BF\u03C2 monos, "alone")[1] refers, in cosmogony, to the Supreme Being, divinity or the totality of all things. A basic unit of perceptual reality is a "monad" in Gottfried Leibniz'`),o=v(),d=f("span"),D=a("Monadology"),w=v(),h=f("span"),T=a(", published in 1714. A single note in music theory is called a monad."),z=v(),N=f("p"),ee=a(`Monads in the Haskell Programming Language were inspired by Category Theory monads. The "monads" discussed herein are inspired by Haskell monads. Here's the definition of the simple monad described in this module:`),O=v(),L=f("pre"),te=a(m[1]),V=v(),H=f("div"),se=a(`In "Monad(6)(v=>v+7)(v=>v*4)(v=>v-10)", the expression "Monad(6)" creates a closure around "x" accessible to the return value, foo(). The expression "foo('stop')" causes foo to return the number held in the closure, 42.`),Q=v(),I=f("p"),ne=a("As in Category Theory and the Haskell programming language, the monads described above encapsulate sequences of computations. They do it in a drastically different way, without relying on types."),U=v(),R=f("p"),ie=a(`Below, you can supply num in "Monad(num)(sum(7))(prod(4))(sum(-10))('stop')" where`),j=v(),x=f("pre"),oe=a(`    const prod = a => b => a*b;
const sum = a => b => a+b;    
`),F=v(),E=f("input"),J=v(),A=f("p"),le=a("num is "),K=a(m[0]),re=a(" so run(num) returns "),W=a(G),X=v(),S=f("h3"),ae=a("Encapsulating State"),Y=v(),k=f("span"),ue=a('Named monads persist after they encounter "stop", ready to process more functions.'),Z=v(),B=f("pre"),fe=a(`var m = Monad(3)
mret;  // returns 3
m(v => v**3)  // Returns foo()
mret  // returns 27`),this.h()},l(e){P&&P.l(e),i=y(e),_=p(e,"BR",{}),M=y(e),l=p(e,"SPAN",{class:!0});var s=c(l);b=u(s,`Monad (from Greek \u03BC\u03BF\u03BD\u03AC\u03C2 monas, "singularity" in turn from \u03BC\u03CC\u03BD\u03BF\u03C2 monos, "alone")[1] refers, in cosmogony, to the Supreme Being, divinity or the totality of all things. A basic unit of perceptual reality is a "monad" in Gottfried Leibniz'`),s.forEach(t),o=y(e),d=p(e,"SPAN",{style:!0});var de=c(d);D=u(de,"Monadology"),de.forEach(t),w=y(e),h=p(e,"SPAN",{});var ve=c(h);T=u(ve,", published in 1714. A single note in music theory is called a monad."),ve.forEach(t),z=y(e),N=p(e,"P",{});var ye=c(N);ee=u(ye,`Monads in the Haskell Programming Language were inspired by Category Theory monads. The "monads" discussed herein are inspired by Haskell monads. Here's the definition of the simple monad described in this module:`),ye.forEach(t),O=y(e),L=p(e,"PRE",{});var ce=c(L);te=u(ce,m[1]),ce.forEach(t),V=y(e),H=p(e,"DIV",{});var _e=c(H);se=u(_e,`In "Monad(6)(v=>v+7)(v=>v*4)(v=>v-10)", the expression "Monad(6)" creates a closure around "x" accessible to the return value, foo(). The expression "foo('stop')" causes foo to return the number held in the closure, 42.`),_e.forEach(t),Q=y(e),I=p(e,"P",{});var be=c(I);ne=u(be,"As in Category Theory and the Haskell programming language, the monads described above encapsulate sequences of computations. They do it in a drastically different way, without relying on types."),be.forEach(t),U=y(e),R=p(e,"P",{});var he=c(R);ie=u(he,`Below, you can supply num in "Monad(num)(sum(7))(prod(4))(sum(-10))('stop')" where`),he.forEach(t),j=y(e),x=p(e,"PRE",{});var Ee=c(x);oe=u(Ee,`    const prod = a => b => a*b;
const sum = a => b => a+b;    
`),Ee.forEach(t),F=y(e),E=p(e,"INPUT",{id:!0,type:!0}),J=y(e),A=p(e,"P",{});var q=c(A);le=u(q,"num is "),K=u(q,m[0]),re=u(q," so run(num) returns "),W=u(q,G),q.forEach(t),X=y(e),S=p(e,"H3",{class:!0});var Me=c(S);ae=u(Me,"Encapsulating State"),Me.forEach(t),Y=y(e),k=p(e,"SPAN",{class:!0});var Pe=c(k);ue=u(Pe,'Named monads persist after they encounter "stop", ready to process more functions.'),Pe.forEach(t),Z=y(e),B=p(e,"PRE",{});var Te=c(B);fe=u(Te,`var m = Monad(3)
mret;  // returns 3
m(v => v**3)  // Returns foo()
mret  // returns 27`),Te.forEach(t),this.h()},h(){$(l,"class","tao svelte-1dr4x6t"),g(d,"font-style","italic"),$(E,"id","one"),$(E,"type","number"),$(S,"class","svelte-1dr4x6t"),$(k,"class","tao svelte-1dr4x6t")},m(e,s){P&&P.m(e,s),n(e,i,s),n(e,_,s),n(e,M,s),n(e,l,s),r(l,b),n(e,o,s),n(e,d,s),r(d,D),n(e,w,s),n(e,h,s),r(h,T),n(e,z,s),n(e,N,s),r(N,ee),n(e,O,s),n(e,L,s),r(L,te),n(e,V,s),n(e,H,s),r(H,se),n(e,Q,s),n(e,I,s),r(I,ne),n(e,U,s),n(e,R,s),r(R,ie),n(e,j,s),n(e,x,s),r(x,oe),n(e,F,s),n(e,E,s),Ae(E,m[0]),n(e,J,s),n(e,A,s),r(A,le),r(A,K),r(A,re),r(A,W),n(e,X,s),n(e,S,s),r(S,ae),n(e,Y,s),n(e,k,s),r(k,ue),n(e,Z,s),n(e,B,s),r(B,fe),C=!0,pe||(me=[Se(E,"input",m[2]),Se(E,"input",m[3])],pe=!0)},p(e,[s]){s&1&&Le(E.value)!==e[0]&&Ae(E,e[0]),(!C||s&1)&&ke(K,e[0]),(!C||s&1)&&G!==(G=e[2](e[0])+"")&&ke(W,G)},i(e){C||(xe(P),C=!0)},o(e){Be(P),C=!1},d(e){P&&P.d(e),e&&t(i),e&&t(_),e&&t(M),e&&t(l),e&&t(o),e&&t(d),e&&t(w),e&&t(h),e&&t(z),e&&t(N),e&&t(O),e&&t(L),e&&t(V),e&&t(H),e&&t(Q),e&&t(I),e&&t(U),e&&t(R),e&&t(j),e&&t(x),e&&t(F),e&&t(E),e&&t(J),e&&t(A),e&&t(X),e&&t(S),e&&t(Y),e&&t(k),e&&t(Z),e&&t(B),pe=!1,Ce(me)}}}function $e(m){return function i(_){return _==="stop"?m:(m=_(m),i)}}function ze(m,i,_){let M=`function Monad (x) {
  return function foo (func) {
    if (func === "stop") return x
    else  {
      x = func(x);
      return foo;
    }
  };
}`;const l=h=>T=>h*T,b=h=>T=>h+T;let o=6,d=function(T){return[$e(T)(b(7))(l(4))(b(-10))]},D=d(o);console.log(D),console.log("num is",o);function w(){o=Le(this.value),_(0,o)}return[o,M,d,w]}class Qe extends He{constructor(i){super(),Ie(this,i,ze,qe,Re,{})}}export{Qe as default};
