import{S as ns,i as as,s as fs,e as r,k as u,t as p,Q as us,c as s,d as t,m,a as c,h as b,b as A,f as v,G as f,g as l,L as _,j as N,M as ms,N as rs,R as ps,O as ss}from"../../chunks/vendor-bc30573c.js";function bs(n){let w,a,S,R,D,pe,X,M,be,he,O,U,W,j,x,J,H,V,G,z,h,K,Q,I,g,Z,Se,P,Y,Ie,$e,q,L,et,$,tt,ot,Ne,ee,lt,E,ce,zt,it,ye,Lt,rt,de,Zt,st,ve,Yt,nt,we,qt,at,ke,Xt,ft,te,Jt,_e,Oe=parseFloat(n[23](y)).toFixed(5).toString()+"",ut,mt,pt,bt,oe,Vt,ht,le,Gt,ct,yt,dt,vt,ie,Kt,wt,i,d,F,Pe,Te,Fe,ti,eo,He,to,oo,lo,io,Ce,oi,ro,Ae,so,no,ao,fo,De,li,uo,Ue,mo,po,bo,ho,kt,ii,co,_t,ri,yo,Tt,si,vo,C,ni,Qt=n[20](y).join(", ")+"",wo,ai,ko,_o,To,Eo,We,fi,Mo,je,ui,Bo,ze,mi,Ro,Le,pi,xo,So,Io,No,Oo,Ee,bi,Et,hi,ci,Po,Mt,yi,Fo,Ze,di,gt=n[8](y)[4]+"",Ho,Co,re,Ao,Do,se,Uo,Wo,ne,jo,zo,ae,Lo,Zo,fe,vi,$t=n[8](y)[2]+"",Yo,qo,Xo,Jo,Vo,Ye,wi,Go,qe,ki,Ko,Xe,_i,Qo,Je,Ti,go,Ve,Ei,$o,ue,el,tl,me,ol,ll,il,rl,sl,Ge,Mi,nl,al,fl,ul,Ke,Bi,ml,Me,pl,bl,Be,hl,cl,Re,yl,dl,xe,vl,wl,kl,_l,Tl,Qe,Ri,El,ge,xi,Ml,Bt,Si,Bl,Rt,Ii,Rl,xt,Ni,xl,St,Oi,Sl,It,Pi,Il,Nt,Fi,Nl,Ot,Hi,Ol,Pt,Ci,Pl,Ft,Ai,Fl,Ht,Di,Hl,Ct,Ui,Cl,At,Wi,Al,Dl,Ul,Wl,jl,zl,Ll,Zl,Yl,ql,Xl,Jl,Vl,Dt,ji,Gl,Ut,zi,Kl,Wt,Li,k,Zi,Gi;return{c(){w=r("link"),a=u(),S=r("br"),R=u(),D=r("div"),pe=p("**************************************************************************"),X=u(),M=r("div"),be=r("br"),he=p(`

A Very Simple Recursive Closure Insulates and Controls State Transformations`),U=u(),W=r("br"),j=u(),x=r("p"),J=p("JavaScript monads are defined in various ways online and in print. I wouldn't say any of these definitions are right or wrong. Everyone is entitled to an opinion. Some of my thoughts on the matter will be in "),H=r("a"),V=p("Home"),G=p(" and in an addendum."),z=u(),h=r("pre"),K=p(n[41]),Q=u(),I=r("p"),g=p('Recursive closures created by "M" will control a fairly complicated dice game called "Score" ('),Z=r("a"),Se=p("Link To Score"),P=p("). It's a solitaire version of a "),Y=r("a"),Ie=p("multiplayer version of the game"),$e=p(' I developed eight years ago based on a Haskell WebSockets server. For solitaire version presented here, a function named "m2" will will form a closure with M as follows: "m2 = M(x)" where x = [ [], [], [], [], [0], [], [0], [] ]. m2 will consume functions that, as the definition of M specifies, operate on x. x will correspond to the current state of game play as seen on a computer monitor and will keep a record of all prior states for each roll of the dice. The record of prior states allows players to traverse the history of their choices . Players can revert to prior states of game play and then move back to more recent states. Traversing states back and forth makes the browser sluggish . They can also traverse prior states of the game in the oposite direction.'),q=u(),L=r("p"),et=p(`Notice that the anonymous function returned by "M" returns a brand new closure in which the value of "x" is func(x') where x' is the previous value of x in "M(x)". There's another version that mutates x. It isn't on the menu, but you can see it in action here: `),$=r("a"),tt=p("Monads That Mutate State"),ot=p(`. There, the function returned by "M" is named and x = func(x)" mutates x each time go(func) executes on a function "func". The x's saved in m2[5] and m2[7] by fu() had to be cloned, so it doesn't seem to matter.`),Ne=u(),ee=r("p"),lt=p("To make what happens in the closures crystal clear, the first demonstration will begin with something simple; mon = M(2).   Experienced programmers can see what is going on by just looking at the code, but if they are reading this after work, a time when they might want to relax for a while, they might appreciate a simple walk-through. Students will benfit from thoroughly understanding what is going on here. So here we go."),E=u(),ce=r("pre"),zt=p(n[47]),it=u(),ye=r("p"),Lt=p(`A monads created by, say, "mon = M(x)" can create an insolated pipeline of state transformations that can wait indefinitely for mon('stop') to return the result. Transformations of M's state can resume at any time. For example, you could run:`),rt=u(),de=r("pre"),Zt=p(n[48]),st=u(),ve=r("p"),Yt=p("In the solitaire version of the game of score below, x will be an array of arrays in the form x =  [ [], [], [], [], [], [], [], [] ] where x[0] starts out as four integers simulating a throw of two six-sided, one twelve-sided, and one twenty-sided dice. x[1] and x[3] contain the number selected by the player, x[2] is the selected operator, and x[4] keeps track of the number of successes until the player wins by reaching x[4] = 5, x[5] contains all prior states as the player selects numbers and operators and is used for reversing state a little or all the way back to the original roll, x[6] is an index of where in x[5] play is taking place, and x[7] contains every state during a round and uses x[6] to travers the history of game play forward. Before getting to that, let's look at a simple example."),nt=u(),we=r("p"),qt=p("These are the demonstration's event handlers:"),at=u(),ke=r("pre"),Xt=p(n[46]),ft=u(),te=r("p"),Jt=p("m4(s) is "),_e=r("span"),ut=p(Oe),mt=u(),pt=r("br"),bt=u(),oe=r("button"),Vt=p("m4(cube)"),ht=u(),le=r("button"),Gt=p("m4(square)"),ct=u(),yt=r("br"),dt=r("br"),vt=u(),ie=r("span"),Kt=p("To call m4(pow(n)), enter n in the box ->"),wt=u(),i=r("input"),d=u(),F=r("br"),Pe=r("br"),Te=u(),Fe=r("span"),ti=p("To call m4(add(n)), enter n in the box ->"),eo=u(),He=r("input"),to=u(),oo=r("br"),lo=r("br"),io=u(),Ce=r("span"),oi=p("To call m4(mult(n)), enter n in the box ->"),ro=u(),Ae=r("input"),so=u(),no=r("br"),ao=r("br"),fo=u(),De=r("span"),li=p("To call m4(reset(n)), enter n in the box ->"),uo=u(),Ue=r("input"),mo=u(),po=r("br"),bo=r("br"),ho=u(),kt=r("p"),ii=p("Next, x will be an array manipulated by functions designed for that purpose. Here are the functions responsible for the interactive demonstration below:"),co=u(),_t=r("pre"),ri=p(n[42]),yo=u(),Tt=r("p"),si=p(`If you click mon3 = mon3(g) four times and the click mon3 = mon3(g3), you will see that mon3(s) returns its original value, [1,2,3,4]. By the way, the "mon3 =" part of "mon3 = mon3(g)" is included solely to trigger updating of browser displays. Svelte doesn't have a virtual DOM, and merely changing objects isn't enough to trigger DOM updates. For example, arr = [1,2,3] doesn't change in the DOM when arr.push(888) is called. arr = arr afterwards or arr = arr.push(888) initially both do the trick.`),vo=u(),C=r("div"),ni=p("["),wo=p(Qt),ai=p("]"),ko=u(),_o=r("br"),To=r("br"),Eo=u(),We=r("button"),fi=p("mon3 = mon3(g)"),Mo=u(),je=r("button"),ui=p("mon3 = mon3(g2)"),Bo=u(),ze=r("button"),mi=p("mon3 = mon3(g3)"),Ro=u(),Le=r("button"),pi=p("mon3 = mon3(x => [1,2,3,4])"),xo=u(),So=r("br"),Io=r("br"),No=r("br"),Oo=u(),Ee=r("p"),bi=p("Now for the game of score, a game involving four dice and two or three-stage arithmetic computations with the goal of arriving at the number 20. My son Alex taught it to me a decade ago, when he was in middle school. I was also learning the Haskell programming language, so I developed a multiplayer online version with groups of interacting player, a chat box, and a shared-by-the-group todo list controlled by a Haskell WebSockets server backend. The backend could compute all possible solutions, if any existed, to any throw of the dice. It also identified all of the impossible-to-solve rolls. Users could change the default number of dice sides from 6,6,12,and 20 and the goal from the default value of 20. A version of it is online at "),Et=r("a"),hi=p("https://score.schalk.net"),ci=p("."),Po=u(),Mt=r("p"),yi=p("This demonstration doesn't work in conjunction with a remote server, nor does it feature any Haskell code. It's just a little solitaire game providing an opportunity to consider the interesting possibilities of recursive closures. Instead of being argunents of function or global object methods, these monads are functions that consume functions. When the functions consumed by monads have no side effects outside of the monad's closure -- which should always be the case -- maintenance and bug tracking become more manageable. Minimizing side effects inside of monadic closure can help even more."),Fo=u(),Ze=r("h3"),di=p("Score: "),Ho=p(gt),Co=u(),re=r("button"),Ao=p(n[0]),Do=u(),se=r("button"),Uo=p(n[1]),Wo=u(),ne=r("button"),jo=p(n[2]),zo=u(),ae=r("button"),Lo=p(n[3]),Zo=u(),fe=r("span"),vi=p("The operator is "),Yo=p($t),qo=u(),Xo=r("br"),Jo=r("br"),Vo=u(),Ye=r("button"),wi=p("add"),Go=u(),qe=r("button"),ki=p("subtract"),Ko=u(),Xe=r("button"),_i=p("multiply"),Qo=u(),Je=r("button"),Ti=p("divide"),go=u(),Ve=r("button"),Ei=p("concat"),$o=u(),ue=r("span"),el=p(n[9]),tl=u(),me=r("span"),ol=p(n[19]),ll=u(),il=r("br"),rl=r("br"),sl=u(),Ge=r("button"),Mi=p("ROLL"),nl=u(),al=r("br"),fl=r("br"),ul=u(),Ke=r("button"),Bi=p("test"),ml=u(),Me=r("button"),pl=p(n[4]),bl=u(),Be=r("button"),hl=p(n[5]),cl=u(),Re=r("button"),yl=p(n[6]),dl=u(),xe=r("button"),vl=p(n[7]),wl=u(),kl=r("br"),_l=r("br"),Tl=u(),Qe=r("button"),Ri=p("Back"),El=u(),ge=r("button"),xi=p("Forward"),Ml=u(),Bt=r("p"),Si=p("The function fu() is the brains behing the game of Score. Each time a number or operator is clicked, m2(fu) is called and fu does various things depending on the state of the closures value, x."),Bl=u(),Rt=r("p"),Ii=p("At the end of fu(), two formatting functions are Called. The first displays or hides variables in the DOM and the second updates their values. Here they are:"),Rl=u(),xt=r("pre"),Ni=p(n[40]),xl=u(),St=r("p"),Oi=p('Clicking "ROLL" calls runRoll() which, in turn, calls updateRoll() to re-set HTML variables.'),Sl=u(),It=r("pre"),Pi=p(n[43]),Il=u(),Nt=r("p"),Fi=p(`The "x = [ [], [], [], [], [0], [], [0], [] ]" format will be maintained throught game play. x[0] simulates the dice roll; x[1] recieves integers that are clicked; x[2] holds the operator; and x[4] contains numbers that are computed. x[4] makes sure at least one computed number is involved in arriving at 20. That's the reason, toward the end of fu(), that the intersection of a[0] and a[4] is examined when 20 is computed. Here are the first few functions called when a number is clicked:`),Nl=u(),Ot=r("pre"),Hi=p(n[44]),Ol=u(),Pt=r("p"),Ci=p(`The first line of fu() is the calculation result that is generated whenever there are two items in (s)[1] and an operator in m2(s)[3]. The intersection is important in fu()'s bottom test. If "intersect", the intersection of m2(s)[1] and m2(s)[3], is empty intersect[0] returns false and the last test in fu fails, even though 20 was produced on the second computation.`),Pl=u(),Ft=r("p"),Ai=p("If no operator has been selected, it's possible to click a third number. The program doesn't complain, it just puts the number back for you with:"),Fl=u(),Ht=r("pre"),Di=p(n[45]),Hl=u(),Ct=r("p"),Ui=p("If you roll the dice and keep clicking on the leftmost number, you'll see the numbers shift back and forth on every try. The first element of m2(s)[0] keeps getting pulled out of the first position and pushed back on the right."),Cl=u(),At=r("p"),Wi=p(`sfunc() does some more DOM housekeeping. The buttons with dice number come and go as their CSS display strings are changed back and forth between "none" and "inline". fu() calls sfunc(). Here's how it is defined:`),Al=u(),Dl=r("br"),Ul=r("br"),Wl=r("br"),jl=r("br"),zl=r("br"),Ll=r("br"),Zl=u(),Yl=r("br"),ql=r("br"),Xl=r("br"),Jl=r("br"),Vl=u(),Dt=r("h2"),ji=p("ADDENDUM"),Gl=u(),Ut=r("p"),zi=p(`I call functions returned by M "monads", much to the consternation of some "functional programmers" who scoff at the idea that JavaScript could possibly have monads such as those defined in the Haskell programming language. Neither my monads nor the Haskell monads are Category Theory monads. Haskell monads insulate chained computation from the global space, consuming functions that return new Monads. Mine happen to do the same thing. Haskell monads need to navegate through various types but I don't bother with that. The definition of "M" shows that the returned function responds to arguments that are functions and also to the string "Stop."`),Kl=u(),Wt=r("p"),Li=p(`In my opinion, trying to define JavaScript objects that resemble the basic monads found in the Haskell Prelude module, amusing though it may be, isn't likely to produce anything very useful. People who think Haskell, or the supposed mathematical category of Haskell types and functions called "Hask", are actually Category Theory categories are mistaken. Category Theory inspired the development of Haskell monads and it might not be merely coincidental that the monads I am about to define are functionally similar to Haskell monads, though superficially quite different. Both transform state along pipelines isolated from their outer scope by operating on functions that return new monads. Both preserve state for future transformations or for eventual use in their outer scopes. Mine call functions in their outer scopes in order to update the DOM, not having to wait to do it in a main() function. I'm not trying to mimic Haskell or any other functional programming language.`),this.h()},l(e){const o=us('[data-svelte="svelte-3yzzxp"]',document.head);w=s(o,"LINK",{rel:!0,href:!0}),o.forEach(t),a=m(e),S=s(e,"BR",{}),R=m(e),D=s(e,"DIV",{});var Ki=c(D);pe=b(Ki,"**************************************************************************"),Ki.forEach(t),X=m(e),M=s(e,"DIV",{style:!0});var Yi=c(M);be=s(Yi,"BR",{}),he=b(Yi,`

A Very Simple Recursive Closure Insulates and Controls State Transformations`),Yi.forEach(t),U=m(e),W=s(e,"BR",{}),j=m(e),x=s(e,"P",{});var Ql=c(x);J=b(Ql,"JavaScript monads are defined in various ways online and in print. I wouldn't say any of these definitions are right or wrong. Everyone is entitled to an opinion. Some of my thoughts on the matter will be in "),H=s(Ql,"A",{href:!0});var Qi=c(H);V=b(Qi,"Home"),Qi.forEach(t),G=b(Ql," and in an addendum."),Ql.forEach(t),z=m(e),h=s(e,"PRE",{});var gi=c(h);K=b(gi,n[41]),gi.forEach(t),Q=m(e),I=s(e,"P",{});var jt=c(I);g=b(jt,'Recursive closures created by "M" will control a fairly complicated dice game called "Score" ('),Z=s(jt,"A",{href:!0});var $i=c(Z);Se=b($i,"Link To Score"),$i.forEach(t),P=b(jt,"). It's a solitaire version of a "),Y=s(jt,"A",{href:!0});var er=c(Y);Ie=b(er,"multiplayer version of the game"),er.forEach(t),$e=b(jt,' I developed eight years ago based on a Haskell WebSockets server. For solitaire version presented here, a function named "m2" will will form a closure with M as follows: "m2 = M(x)" where x = [ [], [], [], [], [0], [], [0], [] ]. m2 will consume functions that, as the definition of M specifies, operate on x. x will correspond to the current state of game play as seen on a computer monitor and will keep a record of all prior states for each roll of the dice. The record of prior states allows players to traverse the history of their choices . Players can revert to prior states of game play and then move back to more recent states. Traversing states back and forth makes the browser sluggish . They can also traverse prior states of the game in the oposite direction.'),jt.forEach(t),q=m(e),L=s(e,"P",{});var gl=c(L);et=b(gl,`Notice that the anonymous function returned by "M" returns a brand new closure in which the value of "x" is func(x') where x' is the previous value of x in "M(x)". There's another version that mutates x. It isn't on the menu, but you can see it in action here: `),$=s(gl,"A",{href:!0});var tr=c($);tt=b(tr,"Monads That Mutate State"),tr.forEach(t),ot=b(gl,`. There, the function returned by "M" is named and x = func(x)" mutates x each time go(func) executes on a function "func". The x's saved in m2[5] and m2[7] by fu() had to be cloned, so it doesn't seem to matter.`),gl.forEach(t),Ne=m(e),ee=s(e,"P",{});var or=c(ee);lt=b(or,"To make what happens in the closures crystal clear, the first demonstration will begin with something simple; mon = M(2).   Experienced programmers can see what is going on by just looking at the code, but if they are reading this after work, a time when they might want to relax for a while, they might appreciate a simple walk-through. Students will benfit from thoroughly understanding what is going on here. So here we go."),or.forEach(t),E=m(e),ce=s(e,"PRE",{});var lr=c(ce);zt=b(lr,n[47]),lr.forEach(t),it=m(e),ye=s(e,"P",{});var ir=c(ye);Lt=b(ir,`A monads created by, say, "mon = M(x)" can create an insolated pipeline of state transformations that can wait indefinitely for mon('stop') to return the result. Transformations of M's state can resume at any time. For example, you could run:`),ir.forEach(t),rt=m(e),de=s(e,"PRE",{});var rr=c(de);Zt=b(rr,n[48]),rr.forEach(t),st=m(e),ve=s(e,"P",{});var sr=c(ve);Yt=b(sr,"In the solitaire version of the game of score below, x will be an array of arrays in the form x =  [ [], [], [], [], [], [], [], [] ] where x[0] starts out as four integers simulating a throw of two six-sided, one twelve-sided, and one twenty-sided dice. x[1] and x[3] contain the number selected by the player, x[2] is the selected operator, and x[4] keeps track of the number of successes until the player wins by reaching x[4] = 5, x[5] contains all prior states as the player selects numbers and operators and is used for reversing state a little or all the way back to the original roll, x[6] is an index of where in x[5] play is taking place, and x[7] contains every state during a round and uses x[6] to travers the history of game play forward. Before getting to that, let's look at a simple example."),sr.forEach(t),nt=m(e),we=s(e,"P",{});var nr=c(we);qt=b(nr,"These are the demonstration's event handlers:"),nr.forEach(t),at=m(e),ke=s(e,"PRE",{});var ar=c(ke);Xt=b(ar,n[46]),ar.forEach(t),ft=m(e),te=s(e,"P",{});var qi=c(te);Jt=b(qi,"m4(s) is "),_e=s(qi,"SPAN",{style:!0});var fr=c(_e);ut=b(fr,Oe),fr.forEach(t),qi.forEach(t),mt=m(e),pt=s(e,"BR",{}),bt=m(e),oe=s(e,"BUTTON",{});var ur=c(oe);Vt=b(ur,"m4(cube)"),ur.forEach(t),ht=m(e),le=s(e,"BUTTON",{});var mr=c(le);Gt=b(mr,"m4(square)"),mr.forEach(t),ct=m(e),yt=s(e,"BR",{}),dt=s(e,"BR",{}),vt=m(e),ie=s(e,"SPAN",{style:!0});var pr=c(ie);Kt=b(pr,"To call m4(pow(n)), enter n in the box ->"),pr.forEach(t),wt=m(e),i=s(e,"INPUT",{type:!0,style:!0}),d=m(e),F=s(e,"BR",{}),Pe=s(e,"BR",{}),Te=m(e),Fe=s(e,"SPAN",{style:!0});var br=c(Fe);ti=b(br,"To call m4(add(n)), enter n in the box ->"),br.forEach(t),eo=m(e),He=s(e,"INPUT",{type:!0,style:!0}),to=m(e),oo=s(e,"BR",{}),lo=s(e,"BR",{}),io=m(e),Ce=s(e,"SPAN",{style:!0});var hr=c(Ce);oi=b(hr,"To call m4(mult(n)), enter n in the box ->"),hr.forEach(t),ro=m(e),Ae=s(e,"INPUT",{type:!0,style:!0}),so=m(e),no=s(e,"BR",{}),ao=s(e,"BR",{}),fo=m(e),De=s(e,"SPAN",{style:!0});var cr=c(De);li=b(cr,"To call m4(reset(n)), enter n in the box ->"),cr.forEach(t),uo=m(e),Ue=s(e,"INPUT",{type:!0,style:!0}),mo=m(e),po=s(e,"BR",{}),bo=s(e,"BR",{}),ho=m(e),kt=s(e,"P",{});var yr=c(kt);ii=b(yr,"Next, x will be an array manipulated by functions designed for that purpose. Here are the functions responsible for the interactive demonstration below:"),yr.forEach(t),co=m(e),_t=s(e,"PRE",{});var dr=c(_t);ri=b(dr,n[42]),dr.forEach(t),yo=m(e),Tt=s(e,"P",{});var vr=c(Tt);si=b(vr,`If you click mon3 = mon3(g) four times and the click mon3 = mon3(g3), you will see that mon3(s) returns its original value, [1,2,3,4]. By the way, the "mon3 =" part of "mon3 = mon3(g)" is included solely to trigger updating of browser displays. Svelte doesn't have a virtual DOM, and merely changing objects isn't enough to trigger DOM updates. For example, arr = [1,2,3] doesn't change in the DOM when arr.push(888) is called. arr = arr afterwards or arr = arr.push(888) initially both do the trick.`),vr.forEach(t),vo=m(e),C=s(e,"DIV",{id:!0,style:!0});var $l=c(C);ni=b($l,"["),wo=b($l,Qt),ai=b($l,"]"),$l.forEach(t),ko=m(e),_o=s(e,"BR",{}),To=s(e,"BR",{}),Eo=m(e),We=s(e,"BUTTON",{});var wr=c(We);fi=b(wr,"mon3 = mon3(g)"),wr.forEach(t),Mo=m(e),je=s(e,"BUTTON",{});var kr=c(je);ui=b(kr,"mon3 = mon3(g2)"),kr.forEach(t),Bo=m(e),ze=s(e,"BUTTON",{});var _r=c(ze);mi=b(_r,"mon3 = mon3(g3)"),_r.forEach(t),Ro=m(e),Le=s(e,"BUTTON",{});var Tr=c(Le);pi=b(Tr,"mon3 = mon3(x => [1,2,3,4])"),Tr.forEach(t),xo=m(e),So=s(e,"BR",{}),Io=s(e,"BR",{}),No=s(e,"BR",{}),Oo=m(e),Ee=s(e,"P",{});var ei=c(Ee);bi=b(ei,"Now for the game of score, a game involving four dice and two or three-stage arithmetic computations with the goal of arriving at the number 20. My son Alex taught it to me a decade ago, when he was in middle school. I was also learning the Haskell programming language, so I developed a multiplayer online version with groups of interacting player, a chat box, and a shared-by-the-group todo list controlled by a Haskell WebSockets server backend. The backend could compute all possible solutions, if any existed, to any throw of the dice. It also identified all of the impossible-to-solve rolls. Users could change the default number of dice sides from 6,6,12,and 20 and the goal from the default value of 20. A version of it is online at "),Et=s(ei,"A",{href:!0});var Er=c(Et);hi=b(Er,"https://score.schalk.net"),Er.forEach(t),ci=b(ei,"."),ei.forEach(t),Po=m(e),Mt=s(e,"P",{});var Mr=c(Mt);yi=b(Mr,"This demonstration doesn't work in conjunction with a remote server, nor does it feature any Haskell code. It's just a little solitaire game providing an opportunity to consider the interesting possibilities of recursive closures. Instead of being argunents of function or global object methods, these monads are functions that consume functions. When the functions consumed by monads have no side effects outside of the monad's closure -- which should always be the case -- maintenance and bug tracking become more manageable. Minimizing side effects inside of monadic closure can help even more."),Mr.forEach(t),Fo=m(e),Ze=s(e,"H3",{});var Xi=c(Ze);di=b(Xi,"Score: "),Ho=b(Xi,gt),Xi.forEach(t),Co=m(e),re=s(e,"BUTTON",{style:!0});var Br=c(re);Ao=b(Br,n[0]),Br.forEach(t),Do=m(e),se=s(e,"BUTTON",{style:!0});var Rr=c(se);Uo=b(Rr,n[1]),Rr.forEach(t),Wo=m(e),ne=s(e,"BUTTON",{style:!0});var xr=c(ne);jo=b(xr,n[2]),xr.forEach(t),zo=m(e),ae=s(e,"BUTTON",{style:!0});var Sr=c(ae);Lo=b(Sr,n[3]),Sr.forEach(t),Zo=m(e),fe=s(e,"SPAN",{style:!0});var Ji=c(fe);vi=b(Ji,"The operator is "),Yo=b(Ji,$t),Ji.forEach(t),qo=m(e),Xo=s(e,"BR",{}),Jo=s(e,"BR",{}),Vo=m(e),Ye=s(e,"BUTTON",{});var Ir=c(Ye);wi=b(Ir,"add"),Ir.forEach(t),Go=m(e),qe=s(e,"BUTTON",{});var Nr=c(qe);ki=b(Nr,"subtract"),Nr.forEach(t),Ko=m(e),Xe=s(e,"BUTTON",{});var Or=c(Xe);_i=b(Or,"multiply"),Or.forEach(t),Qo=m(e),Je=s(e,"BUTTON",{});var Pr=c(Je);Ti=b(Pr,"divide"),Pr.forEach(t),go=m(e),Ve=s(e,"BUTTON",{});var Fr=c(Ve);Ei=b(Fr,"concat"),Fr.forEach(t),$o=m(e),ue=s(e,"SPAN",{style:!0});var Hr=c(ue);el=b(Hr,n[9]),Hr.forEach(t),tl=m(e),me=s(e,"SPAN",{style:!0});var Cr=c(me);ol=b(Cr,n[19]),Cr.forEach(t),ll=m(e),il=s(e,"BR",{}),rl=s(e,"BR",{}),sl=m(e),Ge=s(e,"BUTTON",{});var Ar=c(Ge);Mi=b(Ar,"ROLL"),Ar.forEach(t),nl=m(e),al=s(e,"BR",{}),fl=s(e,"BR",{}),ul=m(e),Ke=s(e,"BUTTON",{});var Dr=c(Ke);Bi=b(Dr,"test"),Dr.forEach(t),ml=m(e),Me=s(e,"BUTTON",{style:!0});var Ur=c(Me);pl=b(Ur,n[4]),Ur.forEach(t),bl=m(e),Be=s(e,"BUTTON",{style:!0});var Wr=c(Be);hl=b(Wr,n[5]),Wr.forEach(t),cl=m(e),Re=s(e,"BUTTON",{style:!0});var jr=c(Re);yl=b(jr,n[6]),jr.forEach(t),dl=m(e),xe=s(e,"BUTTON",{style:!0});var zr=c(xe);vl=b(zr,n[7]),zr.forEach(t),wl=m(e),kl=s(e,"BR",{}),_l=s(e,"BR",{}),Tl=m(e),Qe=s(e,"BUTTON",{});var Lr=c(Qe);Ri=b(Lr,"Back"),Lr.forEach(t),El=m(e),ge=s(e,"BUTTON",{});var Zr=c(ge);xi=b(Zr,"Forward"),Zr.forEach(t),Ml=m(e),Bt=s(e,"P",{});var Yr=c(Bt);Si=b(Yr,"The function fu() is the brains behing the game of Score. Each time a number or operator is clicked, m2(fu) is called and fu does various things depending on the state of the closures value, x."),Yr.forEach(t),Bl=m(e),Rt=s(e,"P",{});var qr=c(Rt);Ii=b(qr,"At the end of fu(), two formatting functions are Called. The first displays or hides variables in the DOM and the second updates their values. Here they are:"),qr.forEach(t),Rl=m(e),xt=s(e,"PRE",{});var Xr=c(xt);Ni=b(Xr,n[40]),Xr.forEach(t),xl=m(e),St=s(e,"P",{});var Jr=c(St);Oi=b(Jr,'Clicking "ROLL" calls runRoll() which, in turn, calls updateRoll() to re-set HTML variables.'),Jr.forEach(t),Sl=m(e),It=s(e,"PRE",{});var Vr=c(It);Pi=b(Vr,n[43]),Vr.forEach(t),Il=m(e),Nt=s(e,"P",{});var Gr=c(Nt);Fi=b(Gr,`The "x = [ [], [], [], [], [0], [], [0], [] ]" format will be maintained throught game play. x[0] simulates the dice roll; x[1] recieves integers that are clicked; x[2] holds the operator; and x[4] contains numbers that are computed. x[4] makes sure at least one computed number is involved in arriving at 20. That's the reason, toward the end of fu(), that the intersection of a[0] and a[4] is examined when 20 is computed. Here are the first few functions called when a number is clicked:`),Gr.forEach(t),Nl=m(e),Ot=s(e,"PRE",{});var Kr=c(Ot);Hi=b(Kr,n[44]),Kr.forEach(t),Ol=m(e),Pt=s(e,"P",{});var Qr=c(Pt);Ci=b(Qr,`The first line of fu() is the calculation result that is generated whenever there are two items in (s)[1] and an operator in m2(s)[3]. The intersection is important in fu()'s bottom test. If "intersect", the intersection of m2(s)[1] and m2(s)[3], is empty intersect[0] returns false and the last test in fu fails, even though 20 was produced on the second computation.`),Qr.forEach(t),Pl=m(e),Ft=s(e,"P",{});var gr=c(Ft);Ai=b(gr,"If no operator has been selected, it's possible to click a third number. The program doesn't complain, it just puts the number back for you with:"),gr.forEach(t),Fl=m(e),Ht=s(e,"PRE",{});var $r=c(Ht);Di=b($r,n[45]),$r.forEach(t),Hl=m(e),Ct=s(e,"P",{});var es=c(Ct);Ui=b(es,"If you roll the dice and keep clicking on the leftmost number, you'll see the numbers shift back and forth on every try. The first element of m2(s)[0] keeps getting pulled out of the first position and pushed back on the right."),es.forEach(t),Cl=m(e),At=s(e,"P",{});var ts=c(At);Wi=b(ts,`sfunc() does some more DOM housekeeping. The buttons with dice number come and go as their CSS display strings are changed back and forth between "none" and "inline". fu() calls sfunc(). Here's how it is defined:`),ts.forEach(t),Al=m(e),Dl=s(e,"BR",{}),Ul=s(e,"BR",{}),Wl=s(e,"BR",{}),jl=s(e,"BR",{}),zl=s(e,"BR",{}),Ll=s(e,"BR",{}),Zl=m(e),Yl=s(e,"BR",{}),ql=s(e,"BR",{}),Xl=s(e,"BR",{}),Jl=s(e,"BR",{}),Vl=m(e),Dt=s(e,"H2",{});var os=c(Dt);ji=b(os,"ADDENDUM"),os.forEach(t),Gl=m(e),Ut=s(e,"P",{});var ls=c(Ut);zi=b(ls,`I call functions returned by M "monads", much to the consternation of some "functional programmers" who scoff at the idea that JavaScript could possibly have monads such as those defined in the Haskell programming language. Neither my monads nor the Haskell monads are Category Theory monads. Haskell monads insulate chained computation from the global space, consuming functions that return new Monads. Mine happen to do the same thing. Haskell monads need to navegate through various types but I don't bother with that. The definition of "M" shows that the returned function responds to arguments that are functions and also to the string "Stop."`),ls.forEach(t),Kl=m(e),Wt=s(e,"P",{});var is=c(Wt);Li=b(is,`In my opinion, trying to define JavaScript objects that resemble the basic monads found in the Haskell Prelude module, amusing though it may be, isn't likely to produce anything very useful. People who think Haskell, or the supposed mathematical category of Haskell types and functions called "Hask", are actually Category Theory categories are mistaken. Category Theory inspired the development of Haskell monads and it might not be merely coincidental that the monads I am about to define are functionally similar to Haskell monads, though superficially quite different. Both transform state along pipelines isolated from their outer scope by operating on functions that return new monads. Both preserve state for future transformations or for eventual use in their outer scopes. Mine call functions in their outer scopes in order to update the DOM, not having to wait to do it in a main() function. I'm not trying to mimic Haskell or any other functional programming language.`),is.forEach(t),this.h()},h(){document.title="Recursive Closures Without Mutating State ",A(w,"rel","stylesheet"),A(w,"href","../Functions/style.css"),v(M,"font-family","Times New Roman"),v(M,"text-align","center"),v(M,"font-size","32px"),A(H,"href","./"),A(Z,"href","#score"),A(Y,"href","https://score.schalk.net"),A($,"href","./monadsOld"),v(_e,"font-size","54px"),v(ie,"font-size","24px"),A(i,"type","text"),v(i,"width","65px"),v(Fe,"font-size","24px"),A(He,"type","number"),v(He,"width","65px"),v(Ce,"font-size","24px"),A(Ae,"type","text"),v(Ae,"width","65px"),v(De,"font-size","24px"),A(Ue,"type","number"),v(Ue,"width","65px"),A(C,"id","score"),v(C,"margin-left","10%"),v(C,"font-size","44px"),v(C,"color","#ddaadd"),A(Et,"href","https://score.schalk.net"),v(re,"display",n[10]),v(se,"display",n[11]),v(ne,"display",n[12]),v(ae,"display",n[13]),v(fe,"margin-left","8%"),v(fe,"font-size","22px"),v(ue,"margin-left","20px"),v(ue,"color","#bbbbff"),v(ue,"font-size","28px"),v(me,"margin-left","20px"),v(me,"color","#bbbbff"),v(me,"font-size","38px"),v(Me,"display",n[14]),v(Be,"display",n[15]),v(Re,"display",n[16]),v(xe,"display",n[17])},m(e,o){f(document.head,w),l(e,a,o),l(e,S,o),l(e,R,o),l(e,D,o),f(D,pe),l(e,X,o),l(e,M,o),f(M,be),f(M,he),l(e,U,o),l(e,W,o),l(e,j,o),l(e,x,o),f(x,J),f(x,H),f(H,V),f(x,G),l(e,z,o),l(e,h,o),f(h,K),l(e,Q,o),l(e,I,o),f(I,g),f(I,Z),f(Z,Se),f(I,P),f(I,Y),f(Y,Ie),f(I,$e),l(e,q,o),l(e,L,o),f(L,et),f(L,$),f($,tt),f(L,ot),l(e,Ne,o),l(e,ee,o),f(ee,lt),l(e,E,o),l(e,ce,o),f(ce,zt),l(e,it,o),l(e,ye,o),f(ye,Lt),l(e,rt,o),l(e,de,o),f(de,Zt),l(e,st,o),l(e,ve,o),f(ve,Yt),l(e,nt,o),l(e,we,o),f(we,qt),l(e,at,o),l(e,ke,o),f(ke,Xt),l(e,ft,o),l(e,te,o),f(te,Jt),f(te,_e),f(_e,ut),l(e,mt,o),l(e,pt,o),l(e,bt,o),l(e,oe,o),f(oe,Vt),l(e,ht,o),l(e,le,o),f(le,Gt),l(e,ct,o),l(e,yt,o),l(e,dt,o),l(e,vt,o),l(e,ie,o),f(ie,Kt),l(e,wt,o),l(e,i,o),l(e,d,o),l(e,F,o),l(e,Pe,o),l(e,Te,o),l(e,Fe,o),f(Fe,ti),l(e,eo,o),l(e,He,o),l(e,to,o),l(e,oo,o),l(e,lo,o),l(e,io,o),l(e,Ce,o),f(Ce,oi),l(e,ro,o),l(e,Ae,o),l(e,so,o),l(e,no,o),l(e,ao,o),l(e,fo,o),l(e,De,o),f(De,li),l(e,uo,o),l(e,Ue,o),l(e,mo,o),l(e,po,o),l(e,bo,o),l(e,ho,o),l(e,kt,o),f(kt,ii),l(e,co,o),l(e,_t,o),f(_t,ri),l(e,yo,o),l(e,Tt,o),f(Tt,si),l(e,vo,o),l(e,C,o),f(C,ni),f(C,wo),f(C,ai),l(e,ko,o),l(e,_o,o),l(e,To,o),l(e,Eo,o),l(e,We,o),f(We,fi),l(e,Mo,o),l(e,je,o),f(je,ui),l(e,Bo,o),l(e,ze,o),f(ze,mi),l(e,Ro,o),l(e,Le,o),f(Le,pi),l(e,xo,o),l(e,So,o),l(e,Io,o),l(e,No,o),l(e,Oo,o),l(e,Ee,o),f(Ee,bi),f(Ee,Et),f(Et,hi),f(Ee,ci),l(e,Po,o),l(e,Mt,o),f(Mt,yi),l(e,Fo,o),l(e,Ze,o),f(Ze,di),f(Ze,Ho),l(e,Co,o),l(e,re,o),f(re,Ao),l(e,Do,o),l(e,se,o),f(se,Uo),l(e,Wo,o),l(e,ne,o),f(ne,jo),l(e,zo,o),l(e,ae,o),f(ae,Lo),l(e,Zo,o),l(e,fe,o),f(fe,vi),f(fe,Yo),l(e,qo,o),l(e,Xo,o),l(e,Jo,o),l(e,Vo,o),l(e,Ye,o),f(Ye,wi),l(e,Go,o),l(e,qe,o),f(qe,ki),l(e,Ko,o),l(e,Xe,o),f(Xe,_i),l(e,Qo,o),l(e,Je,o),f(Je,Ti),l(e,go,o),l(e,Ve,o),f(Ve,Ei),l(e,$o,o),l(e,ue,o),f(ue,el),l(e,tl,o),l(e,me,o),f(me,ol),l(e,ll,o),l(e,il,o),l(e,rl,o),l(e,sl,o),l(e,Ge,o),f(Ge,Mi),l(e,nl,o),l(e,al,o),l(e,fl,o),l(e,ul,o),l(e,Ke,o),f(Ke,Bi),l(e,ml,o),l(e,Me,o),f(Me,pl),l(e,bl,o),l(e,Be,o),f(Be,hl),l(e,cl,o),l(e,Re,o),f(Re,yl),l(e,dl,o),l(e,xe,o),f(xe,vl),l(e,wl,o),l(e,kl,o),l(e,_l,o),l(e,Tl,o),l(e,Qe,o),f(Qe,Ri),l(e,El,o),l(e,ge,o),f(ge,xi),l(e,Ml,o),l(e,Bt,o),f(Bt,Si),l(e,Bl,o),l(e,Rt,o),f(Rt,Ii),l(e,Rl,o),l(e,xt,o),f(xt,Ni),l(e,xl,o),l(e,St,o),f(St,Oi),l(e,Sl,o),l(e,It,o),f(It,Pi),l(e,Il,o),l(e,Nt,o),f(Nt,Fi),l(e,Nl,o),l(e,Ot,o),f(Ot,Hi),l(e,Ol,o),l(e,Pt,o),f(Pt,Ci),l(e,Pl,o),l(e,Ft,o),f(Ft,Ai),l(e,Fl,o),l(e,Ht,o),f(Ht,Di),l(e,Hl,o),l(e,Ct,o),f(Ct,Ui),l(e,Cl,o),l(e,At,o),f(At,Wi),l(e,Al,o),l(e,Dl,o),l(e,Ul,o),l(e,Wl,o),l(e,jl,o),l(e,zl,o),l(e,Ll,o),l(e,Zl,o),l(e,Yl,o),l(e,ql,o),l(e,Xl,o),l(e,Jl,o),l(e,Vl,o),l(e,Dt,o),f(Dt,ji),l(e,Gl,o),l(e,Ut,o),f(Ut,zi),l(e,Kl,o),l(e,Wt,o),f(Wt,Li),k=!0,Zi||(Gi=[_(oe,"click",n[35]),_(le,"click",n[34]),_(i,"keydown",n[36]),_(He,"keydown",n[37]),_(Ae,"keydown",n[38]),_(Ue,"keydown",n[39]),_(We,"click",n[51]),_(je,"click",n[52]),_(ze,"click",n[53]),_(Le,"click",n[54]),_(re,"click",n[55]),_(se,"click",n[56]),_(ne,"click",n[57]),_(ae,"click",n[58]),_(Ye,"click",n[59]),_(qe,"click",n[60]),_(Xe,"click",n[61]),_(Je,"click",n[62]),_(Ve,"click",n[63]),_(Ge,"click",n[64]),_(Ke,"click",n[65]),_(Qe,"click",n[66]),_(ge,"click",n[67])],Zi=!0)},p(e,o){(!k||o[0]&8388608)&&Oe!==(Oe=parseFloat(e[23](y)).toFixed(5).toString()+"")&&N(ut,Oe),(!k||o[0]&1048576)&&Qt!==(Qt=e[20](y).join(", ")+"")&&N(wo,Qt),(!k||o[0]&256)&&gt!==(gt=e[8](y)[4]+"")&&N(Ho,gt),(!k||o[0]&1)&&N(Ao,e[0]),(!k||o[0]&1024)&&v(re,"display",e[10]),(!k||o[0]&2)&&N(Uo,e[1]),(!k||o[0]&2048)&&v(se,"display",e[11]),(!k||o[0]&4)&&N(jo,e[2]),(!k||o[0]&4096)&&v(ne,"display",e[12]),(!k||o[0]&8)&&N(Lo,e[3]),(!k||o[0]&8192)&&v(ae,"display",e[13]),(!k||o[0]&256)&&$t!==($t=e[8](y)[2]+"")&&N(Yo,$t),(!k||o[0]&512)&&N(el,e[9]),(!k||o[0]&524288)&&N(ol,e[19]),(!k||o[0]&16)&&N(pl,e[4]),(!k||o[0]&16384)&&v(Me,"display",e[14]),(!k||o[0]&32)&&N(hl,e[5]),(!k||o[0]&32768)&&v(Be,"display",e[15]),(!k||o[0]&64)&&N(yl,e[6]),(!k||o[0]&65536)&&v(Re,"display",e[16]),(!k||o[0]&128)&&N(vl,e[7]),(!k||o[0]&131072)&&v(xe,"display",e[17])},i(e){k||(ms(()=>{O||(O=rs(M,ss,{},!0)),O.run(1)}),k=!0)},o(e){O||(O=rs(M,ss,{},!1)),O.run(0),k=!1},d(e){t(w),e&&t(a),e&&t(S),e&&t(R),e&&t(D),e&&t(X),e&&t(M),e&&O&&O.end(),e&&t(U),e&&t(W),e&&t(j),e&&t(x),e&&t(z),e&&t(h),e&&t(Q),e&&t(I),e&&t(q),e&&t(L),e&&t(Ne),e&&t(ee),e&&t(E),e&&t(ce),e&&t(it),e&&t(ye),e&&t(rt),e&&t(de),e&&t(st),e&&t(ve),e&&t(nt),e&&t(we),e&&t(at),e&&t(ke),e&&t(ft),e&&t(te),e&&t(mt),e&&t(pt),e&&t(bt),e&&t(oe),e&&t(ht),e&&t(le),e&&t(ct),e&&t(yt),e&&t(dt),e&&t(vt),e&&t(ie),e&&t(wt),e&&t(i),e&&t(d),e&&t(F),e&&t(Pe),e&&t(Te),e&&t(Fe),e&&t(eo),e&&t(He),e&&t(to),e&&t(oo),e&&t(lo),e&&t(io),e&&t(Ce),e&&t(ro),e&&t(Ae),e&&t(so),e&&t(no),e&&t(ao),e&&t(fo),e&&t(De),e&&t(uo),e&&t(Ue),e&&t(mo),e&&t(po),e&&t(bo),e&&t(ho),e&&t(kt),e&&t(co),e&&t(_t),e&&t(yo),e&&t(Tt),e&&t(vo),e&&t(C),e&&t(ko),e&&t(_o),e&&t(To),e&&t(Eo),e&&t(We),e&&t(Mo),e&&t(je),e&&t(Bo),e&&t(ze),e&&t(Ro),e&&t(Le),e&&t(xo),e&&t(So),e&&t(Io),e&&t(No),e&&t(Oo),e&&t(Ee),e&&t(Po),e&&t(Mt),e&&t(Fo),e&&t(Ze),e&&t(Co),e&&t(re),e&&t(Do),e&&t(se),e&&t(Wo),e&&t(ne),e&&t(zo),e&&t(ae),e&&t(Zo),e&&t(fe),e&&t(qo),e&&t(Xo),e&&t(Jo),e&&t(Vo),e&&t(Ye),e&&t(Go),e&&t(qe),e&&t(Ko),e&&t(Xe),e&&t(Qo),e&&t(Je),e&&t(go),e&&t(Ve),e&&t($o),e&&t(ue),e&&t(tl),e&&t(me),e&&t(ll),e&&t(il),e&&t(rl),e&&t(sl),e&&t(Ge),e&&t(nl),e&&t(al),e&&t(fl),e&&t(ul),e&&t(Ke),e&&t(ml),e&&t(Me),e&&t(bl),e&&t(Be),e&&t(cl),e&&t(Re),e&&t(dl),e&&t(xe),e&&t(wl),e&&t(kl),e&&t(_l),e&&t(Tl),e&&t(Qe),e&&t(El),e&&t(ge),e&&t(Ml),e&&t(Bt),e&&t(Bl),e&&t(Rt),e&&t(Rl),e&&t(xt),e&&t(xl),e&&t(St),e&&t(Sl),e&&t(It),e&&t(Il),e&&t(Nt),e&&t(Nl),e&&t(Ot),e&&t(Ol),e&&t(Pt),e&&t(Pl),e&&t(Ft),e&&t(Fl),e&&t(Ht),e&&t(Hl),e&&t(Ct),e&&t(Cl),e&&t(At),e&&t(Al),e&&t(Dl),e&&t(Ul),e&&t(Wl),e&&t(jl),e&&t(zl),e&&t(Ll),e&&t(Zl),e&&t(Yl),e&&t(ql),e&&t(Xl),e&&t(Jl),e&&t(Vl),e&&t(Dt),e&&t(Gl),e&&t(Ut),e&&t(Kl),e&&t(Wt),Zi=!1,ps(Gi)}}}var y="stop";function hs(n,w,a){var S=parseInt(n,10),R=parseInt(w,10);return a==="+"?S+R:a==="*"?S*R:a==="-"?S-R:a==="/"?S/R:a==="@"?" "+S+R:"fubar"}function cs(n){var w=n.pop()**3;return n.unshift(w),n}function ys(n){return n.flatMap(w=>(w+1)**3)}function ds(n){return n.flatMap(w=>Math.round(w**(1/3)))}function B(n){return JSON.parse(JSON.stringify(n))}function T(n){return function w(a){if(typeof a=="function")return n=a(n),w;if(a==="stop")return n}}function Vi(n){var w=n.split("/");return w.length>1?w[0]/w[1]:w[0]}function vs(n,w){return n.filter(a=>w.includes(a))}function ws(n,w,a){let S;var U,W,j,x,R="none",D="none",pe="none",X="none",M="none",be="none",he="none",O="none",U,W,j,x,J,H,V,G,z,h,K;K=i=>{var d=[[Math.floor(Math.random()*6)+1,Math.floor(Math.random()*6)+1,Math.floor(Math.random()*12)+1,Math.floor(Math.random()*20)+1],[],["+"],[],[i],[],[0],[]];return a(8,h=T(d)),a(8,h=T(h(y))),I(h),h(q),h};var Q="",I,g;h=T([[Math.floor(Math.random()*6)+1,Math.floor(Math.random()*6)+1,Math.floor(Math.random()*12)+1,Math.floor(Math.random()*20)+1],[],["+"],[],[0],[],[0],[]]);function Z(){return a(0,U=h(y)[0][0]),a(1,W=h(y)[0][1]),a(2,j=h(y)[0][2]),a(3,x=h(y)[0][3]),h(y)[2],h(y)[3],z=h(y)[4],a(4,J=h(y)[1][0]),a(5,H=h(y)[1][1]),a(6,V=h(y)[1][2]),a(7,G=h(y)[1][3]),h}var Se="",P=T([1,2,3,4]),Y;Y=i=>{if(i[5].length<1){a(8,h=T(i)),console.log("You're already all the way back");return}else{var d=i[7],i=i[5][i[5].length-1];i[7]=d,a(8,h=T(i)),Z(),g()}};var Ie;Ie=i=>{var d=i[6][0];if(i[5].length===i[7].length){console.log("Already at the top"),a(8,h=T(i));return}else{var F=B(i[7]),i=i[7][d+1];i[7]=F,a(8,h=T(i)),Z(),g()}};function $e(){var i=h(y);return console.log("<><><><><><><><> xx is",i),console.log(i[0]),console.log("xx[5].length is ",i[5].length),console.log("index is",i[6]),a(8,h=T(i)),h}function q(i){var d;i[5].push([B(i[0]),B(i[1]),B(i[2]),B(i[3]),B(i[4]),B(i[5]),B(i[6]),B(i[7])]),i[7].push([B(i[0]),B(i[1]),B(i[2]),B(i[3]),B(i[4]),B(i[5]),B(i[6]),B(i[7])]),i[6][0]+=1;var F;z=i[4];var Pe;if(i[1].length===2&&i[2].length===1&&(Pe=i[1],F=hs(i[1][0],i[1][1],i[2][0]),i[0].push(F),i[3].push(F),i[1]=[],d=T(i)),i[1].length===3&&i[0].push(i[1].pop()),F==20&&vs(Pe,i[3]).length>0){if(z===4)a(19,Se="You win! "),i[4][0]=0,K(0);else{var Te=parseInt(i[4][0],10);Te+=1,a(9,Q="           Your score increased to "+Te),K(Te)}setTimeout(()=>a(9,Q=a(19,Se="")),3e3)}return d=T(i),Z(),g(),d(y)}var L=i=>{i[1].push(i[0][0]),i[0].shift(),a(8,h=T(i)),a(8,h=h(q))},et=i=>{i[1].push(i[0].splice(1,1)[0]),a(8,h=T(i)),a(8,h=h(q))},$=i=>{i[1].push(i[0].splice(2,1)[0]),a(8,h=T(i)),a(8,h=h(q))},tt=i=>{i[1].push(i[0].splice(3,1)[0]),a(8,h=T(i)),a(8,h=h(q))};function ot(i){i[2]="+",a(8,h=T(i))}function Ne(i){i[2]="*",a(8,h=T(i))}function ee(i){i[2]="/",a(8,h=T(i))}function lt(i){i[2]="@",a(8,h=T(i))}var E=T(3.1415926535),ce=i=>i**3,zt=i=>i*i,it=i=>d=>d**i,ye=i=>d=>1*d+1*i,Lt=i=>d=>d*i,rt=i=>d=>i;function de(){a(23,E=E(zt))}function Zt(){a(23,E=E(ce))}var st=function(d){var F=Vi(d.target.value);d.keyCode==13&&a(23,E=E(it(F)))},ve=function(d){d.keyCode==13&&a(23,E=E(ye(d.target.value)))},Yt=function(d){d.keyCode==13&&a(23,E=E(Lt(Vi(d.target.value))))},nt=function(d){d.keyCode==13&&a(23,E=E(rt(Vi(d.target.value))))},we=`function fu (a) {                                    // fu
  a[5].push(clone(a));
  a[7].push(clone(a));
  a[6][0] += 1;
    // a[1].push(a[0].pop());
  var result;
  SCORE = a[4];
  var a1;
  if (a[1].length === 2 && a[2].length === 1)   {
    a1 = a[1];
    result = calc(a[1][0], a[1][1],a[2][0]);
    a[0].push(result);
    a[3].push(result);  
    a[1] = [];
    m2 = M(a);
  }

  if (a[1].length === 3) {
    a[0].push(a[1].pop());
  }
 
  if (result == 20 && intersection(a1, a[3]).length > 0) {
      if (a[4][0] === 4) {
          ZWIN = "You win! "
          a[4][0] = 0;
          runRoll(0);
      }
      else {
          var aint = parseInt(a[4][0], 10);
          aint += 1;
          Z = "           Your score increased to " + aint;
          runRoll(aint); 
      }
      setTimeout(() => Z = ZWIN = "", 3000);
  }
  update();
  sfunc();
  return m2(s); 
}; 

// Now variables that appear in curly braces in the DOM must be updated.

function sfunc () {
    b0 = b1 = b2 = b3 = b4 = b5 = b6 = b7 = "none"; // All button displays controlled by b's disappear. 
    if (AA != (undefined && 0)) b0 = "inline"; // Next, selected buttons are diplayed.
    if (BB != (undefined && 0)) b1 = "inline";
    if (CC != (undefined && 0)) b2 = "inline";
    if (DD != (undefined && 0)) b3 = "inline";
    if (WW != (undefined && 0)) b4 = "inline";
    if (XX != (undefined && 0)) b5 = "inline";
    if (YY != (undefined && 0)) b6 = "inline";
    if (ZZ != (undefined && 0)) b7 = "inline";
}

var update = () => { // Now the values of DOM variables are updated.
  AA = m2(s)[0][0];
  BB = m2(s)[0][1];
  CC = m2(s)[0][2];
  DD = m2(s)[0][3];
  EE = m2(s)[2];
  FF = m2(s)[3];
  SCORE = m2(s)[4];
  WW = m2(s)[1][0];
  XX = m2(s)[1][1];
  YY = m2(s)[1][2];
  ZZ = m2(s)[1][3];
}`,qt=`function M (x) {
  return function go (func) {
      if (typeof func === "function") {
          x = func(x);
          return go;
      }
      else if (func === "stop") return x;
  }
};`,at=`var mon3 = M([1,2,3,4]);
function g(ar) {
    var x = (ar.pop())**3;
    ar.unshift(x);
  return ar;
};
function g2 (ar) {return (ar.flatMap(v => (v+1)**3))};
function g3 (ar) {return (ar.flatMap(v => Math.round(v**(1/3))))};`,ke=`runRoll = x => {
    m2 = M([ [Math.floor(Math.random()*6) + 1, Math.floor(Math.random()*6) + 1, Math.floor(Math.random()*12) + 1, Math.floor(Math.random()*20) + 1], [], [], [], [x] ]);
    updateRoll();
    EEE = "yet to be selected";
    XO = m2('stop');
    AR = [];
    index = 0;
}
const updateRoll = () => {
  AA = m2(s)[0][0];
  BB = m2(s)[0][1];
  CC = m2(s)[0][2];
  DD = m2(s)[0][3];
  
  WW = m2(s)[1][0];
  XX = m2(s)[1][1];
  YY = m2(s)[1][2];
  ZZ = m2(s)[1][3];
  EE = m2(s)[2];
  FF = m2(s)[3];
  SCORE = m2(s)[4];
  b0 = b1 = b2 = b3 = "inline";
  b4 = b5 = b6 = b7 = 'none';
};`,Xt=`var click0 = a => {
    a[1].push(a[0][0])
    a[0].shift();
    m2 = M(a);
    m2(fu);
    // sfunc();
};

var click1 = a => {
    a[1].push(a[0].splice(1,1)[0]);
    m2 = M(a);
    m2 = m2(fu);
};

var click2 = a => {
    a[1].push(a[0].splice(2,1)[0]);
    m2 = M(a);
    m2 = m2(fu);
};

var click3 = a => {
    a[1].push(a[0].splice(3,1)[0]);
    m2 = M(a);
    m2 = m2(fu);
};

function clic0 (m) {
  EEE = "add";
  m[2] = "+";
  m2 = M(m) ;
} 

$: clic1 = m => {
  EEE = "subtract";
  m[2] = "-";
  m2 = M(m) ;
} 

function clic2 (m) {
  EEE = "multiply";
  m[2] = "*";
  m2 = M(m) ;
} 

function clic3 (m) {
  EEE = "divide";
  m[2] = "/";
  m2 = M(m) ;
} 

function clic4 (m) {
  EEE = "concat";
  m[2] = "@"
  m2 = M(m);
};`,ft=`if (a[1].length === 3) {   
    a[0].push(a[1].pop());  // Returns a clicked third number.
  };`,te=`function squareFu () {m4 = m4(square)};
function cubeFu () {m4 = m4(cube)};

function divFraction (x) {
    var y = x.split('/');
    if(y.length > 1){
        return (y[0] / y[1])
    }
    else{
        return y[0];
    }
}

var powFu = function powFu (e) {
    var p = divFraction(e.target.value);
    if (e.keyCode == 13) {
        m4 = m4(pow(p));
    }
};
    
var addFu = function addFu (e) {
    if (e.keyCode == 13) {
        m4 = m4(add(e.target.value));
    };
  };
    
var multFu = function multFu (e) {
    if (e.keyCode == 13) {
        m4 = m4(mult(divFraction(e.target.value)))};
};
    
var resetFu = function resetFu (e) {
    if (e.keyCode == 13) {
        m4 = m4(reset2(divFraction(e.target.value)))
    };
};`,Jt="var mon = M(2); // mon = the anonymous function returned by M  ",_e=`var mon = M(2);  
mon(v=>v**4)(v=>v+5)(v=>v*2);
// The value of x can be obtained later
mon('stop');  // 42
mon(v => v*v);
// And later:
mon('stop');  // 1764`;const Oe=()=>a(20,P=P(cs)),ut=()=>a(20,P=P(ys)),mt=()=>a(20,P=P(ds)),pt=()=>a(20,P=P(i=>[1,2,3,4])),bt=()=>h(L),oe=()=>h(et),Vt=()=>h($),ht=()=>h(tt),le=()=>h(ot),Gt=()=>h(S),ct=()=>h(Ne),yt=()=>h(ee),dt=()=>h(lt),vt=()=>h(K(h(y)[4])),ie=()=>$e(),Kt=()=>h(Y),wt=()=>h(Ie);return n.$$.update=()=>{n.$$.dirty[0]&512&&a(9,Q),n.$$.dirty[0]&512,n.$$.dirty[0]&256&&a(0,U=h(y)[0][0]),n.$$.dirty[0]&256&&a(1,W=h(y)[0][1]),n.$$.dirty[0]&256&&a(2,j=h(y)[0][2]),n.$$.dirty[0]&256&&a(3,x=h(y)[0][3]),n.$$.dirty[0]&256&&a(4,J=h(y)[1][0]),n.$$.dirty[0]&256&&a(5,H=h(y)[1][1]),n.$$.dirty[0]&256&&a(6,V=h(y)[1][2]),n.$$.dirty[0]&256&&a(7,G=h(y)[1][3]),n.$$.dirty[0]&255&&a(50,g=function(){a(10,R=a(11,D=a(12,pe=a(13,X=a(14,M=a(15,be=a(16,he=a(17,O="none")))))))),U!=null&&a(10,R="inline"),W!=null&&a(11,D="inline"),j!=null&&a(12,pe="inline"),x!=null&&a(13,X="inline"),J!=null&&a(14,M="inline"),H!=null&&a(15,be="inline"),V!=null&&a(16,he="inline"),G!=null&&a(17,O="inline")}),n.$$.dirty[0]&256&&h(y)[2],n.$$.dirty[0]&256&&h(y)[3],n.$$.dirty[0]&256&&(z=h(y)[4]),n.$$.dirty[0]&256&&h(y)},z=[0],a(49,I=function(d){console.log("In updateRoll. m(s) is",d(y)),a(0,U=d(y)[0][0]),a(1,W=d(y)[0][1]),a(2,j=d(y)[0][2]),a(3,x=d(y)[0][3]),a(4,J=d(y)[1][0]),a(5,H=d(y)[1][1]),a(6,V=d(y)[1][2]),a(7,G=d(y)[1][3]),d(y)[2],d(y)[3],z=d(y)[4],a(10,R=a(11,D=a(12,pe=a(13,X="inline")))),a(14,M=a(15,be=a(16,he=a(17,O="none"))))}),a(24,S=i=>{i[2]="-",a(8,h=T(i))}),[U,W,j,x,J,H,V,G,h,Q,R,D,pe,X,M,be,he,O,K,Se,P,Y,Ie,E,S,$e,L,et,$,tt,ot,Ne,ee,lt,de,Zt,st,ve,Yt,nt,we,qt,at,ke,Xt,ft,te,Jt,_e,I,g,Oe,ut,mt,pt,bt,oe,Vt,ht,le,Gt,ct,yt,dt,vt,ie,Kt,wt]}class _s extends ns{constructor(w){super();as(this,w,ws,bs,fs,{},null,[-1,-1,-1,-1])}}export{_s as default};
